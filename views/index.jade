//- server-side jade template engine
extends layout
block content
	form#add-task.add-task: ul: li
		input(type='text', id='text-taskdesc', name='text-taskdesc', placeholder='#{lingua.controls.inputTaskDescription}')
		button(id='button-ct', name='button-ct') #{lingua.controls.buttonAddTask}
	section.tasklist.todo
		h3
			| #{lingua.lists.headerTodo}
		ul#todo-list
			each task in list.tasks
				if task.state === 'todo'
					li(id='t-#{task.id}')
						input(type='checkbox', id='cb-#{task.id}', rel='todo')
						label(for='cb-#{task.id}') \
						span #{task.description}
						button(type='submit',  name='button-rm') -
	section.tasklist.inprogress
		h3
			| #{lingua.lists.headerInprogress}
		ul#inprogress-list
			each task in list.tasks
				if task.state === 'inprogress'
					li(id='t-#{task.id}')
						input(type='checkbox', id='cb-#{task.id}', checked='checked', rel='inprogress')
						label(for='cb-#{task.id}') \
						span #{task.description}
						button(type='submit',  name='button-rm') -
	section.tasklist.done
		h3
			| #{lingua.lists.headerDone}
		ul#done-list
			each task in list.tasks
				if task.state === 'done'
					li(id='t-#{task.id}')		
						input(type='checkbox', id='cb-#{task.id}', checked='checked', rel='done')
						label(for='cb-#{task.id}') #
						span #{task.description}
						button(type='submit',  name='button-rm') -



	//- browser/client-side jade template engine
	//- ----------------------------------------
	script(type='text/jade')#taskTemplate.
		li(id='t-\#{id}')
			if state === 'done'
				input(type='checkbox', id='cb-\#{id}', checked='checked', rel='done')
				label(for='cb-\#{id}') #
			else if state === 'inprogress'
				input(type='checkbox', id='cb-\#{id}', checked='checked', rel='inprogress')
				label(for='cb-\#{id}') \
			else
				input(type='checkbox', id='cb-\#{id}', rel='todo')
				label(for='cb-\#{id}') \
			
			span \#{description}
			button(type='submit', name='button-rm') -



	//- client business logic
	//- ---------------------
	script.
		// set up a client-side jade template object
		var taskTemplate = jade.compile($('#taskTemplate').text());

		// connect to a socket.io server
		var socket = io.connect();

		// emit event to join a room 
		socket.emit('aliasResponse', { alias: '#{list.alias}' }, function() {
			console.log(" >> emitted alias");
			
			// emitting: add task to list
			$("#add-task").submit(function(event){
				event.preventDefault(event);
		
				var $item = $(this);
				var task = $(this).find('input').val();
				var validTask = htmlEntities(task);
				$(this)[0].reset();

				socket.emit('addTask', { description: validTask});
			});

			// catch all bubbling click events on the lists
			$(".tasklist").each(function(){
				var $tc = $(this);

				// emitting: change task state
				$tc.on('click', 'input[type="checkbox"]', function(event){
					$item = $(this);
					var taskId = $item.parent().attr("id").substring(2);
					var currentState = $item.attr("rel");
					console.log(currentState);

					if(currentState === 'todo')
						currentState = 'inprogress';
					else if(currentState === 'inprogress')
						currentState = 'done';
					else if(currentState === 'done')
						currentState = 'todo';

					socket.emit('changeTaskState', { id: taskId, state: currentState });
				});

				// emitting: remove task from list
				$tc.on('click', 'button', function(event){
					$item = $(this);
					event.preventDefault(event);
					var taskId = $item.parent().attr("id").substring(2);
					socket.emit('removeTask', { id: taskId });	
				});	
			});

			// listening: add task to list
			socket.on('addedTask', function(taskData) {
				
				// add new task to the todo-list by generetating it with a browser/client-side jade template
				// appending it using jQuery
				$('#todo-list').append(taskTemplate(taskData));

			});

			// listening: remove task from list
			socket.on('removedTask', function(taskId) {
				// remove task from list
				$('#t-' + taskId).remove();

			});

			// listening: change task state 
			socket.on('changedTaskState', function(taskData) {
				// remove task from list
				$('#t-' + taskData.id).remove();

				// add it to the other list
				if(taskData.state == 'done') {
					$('#done-list').append(taskTemplate(taskData));
				} else if(taskData.state == 'inprogress') {
					$('#inprogress-list').append(taskTemplate(taskData));
				} else {
					$('#todo-list').append(taskTemplate(taskData));
				}
			});

			// listening: list deletion
			socket.on('deletedList', function() {
				alert("sorry, this list just expired :-/\nyou'll get redirected to a new alias!");
				window.location.replace("/");
			});

		});